pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS')
        AWS_SECRET_ACCESS_KEY = credentials('AWS')
    } 

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'Githubcreds', branch: 'custom_modules', url: 'https://github.com/devsecopsmurali/CICD_terraform.git'
            }
        }
         stage('Terraform init') {
            steps {
                sh 'cd dev_module_2;terraform init'
            }
        }
        stage('echo') {
            steps {
                sh 'echo "hi"'
            }
        }
        stage('Terraform refresh') {
            steps {
                sh 'cd dev_module_2;terraform refresh'
            }
        }
        stage('Terraform apply') {
            steps {
                sh "cd dev_module_2;terraform apply --auto-approve"
            }
        }

        stage('Print Inventory') {
      steps {
        sh '''
          echo $(terraform output -json ec2_public_ip) | awk -F'"' '{print $2}' > aws_hosts
          cat aws_hosts
        '''
      }
    }
    stage('Wait EC2') {
      steps {
        sh '''
          aws ec2 wait instance-status-ok --region us-east-1 --instance-ids `$(terraform output -json ec2_id_test) | awk -F'"' '{print $2}'`
        '''
      }
    }

    stage('Validate Ansible') {
      input {
        message "Do you want to run Ansible Playbook?"
        ok "Run Ansible"
      }
      steps {
        echo "Ansible Accepted"
      }
    }

    stage('Run Ansible') {
      steps {
        ansiblePlaybook(inventory: '${aws_instance.web_servers.public_ip}', playbook: 'dev_module_2/config.yml')
      }
    }


        // stage('Retrieve Host IPs') {
        //     steps {
        //         script {
        //             // Use Terraform output to retrieve host IPs
        //             def output = sh(script: 'terraform output -json', returnStdout: true).trim()
        //             def hostIPs = output =~ /"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"/
                    
        //             // Extract IPs from the match groups
        //             def ipsList = hostIPs.collect { it[1] }
        //             def hostIPsString = ipsList.join(',')
                    
        //             echo "Host IPs: $hostIPsString"
                    
        //             // Write host IPs to a file
        //             writeFile file: 'host_ips.txt', text: hostIPsString
        //         }
        //     }
        // }
        // stage('Ansible Configuration') {
        //     steps {
        //         // Run Ansible playbooks to configure provisioned hosts
        //         script {
        //             sh "ansible-playbook config.yml --extra-vars '@host_ips.txt'"
        //         }
        //     }
        // }
    }

    }
